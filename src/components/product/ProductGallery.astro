---
export interface Props {
  images: string[];
}

const { images } = Astro.props;
---

<div class="product-gallery">
  <div class="grid grid-cols-1 gap-4">
    <div class="main-image-container relative rounded-lg overflow-hidden border border-neutral">
      <img 
        id="main-image" 
        src={images[0]} 
        alt="Product Image" 
        class="w-full h-auto object-cover aspect-square"
      />
      <button 
        class="absolute top-4 right-4 bg-white/80 p-2 rounded-full shadow-sm hover:bg-white transition-colors"
        aria-label="Zoom image"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
        </svg>
      </button>
    </div>
    
    <div class="thumbnail-container">
      <div class="flex space-x-2 overflow-x-auto pb-2">
        {images.map((image, index) => (
          <div 
          class={`thumbnail cursor-pointer rounded-md overflow-hidden border-2 ${index === 0 ? 'border-primary' : 'border-transparent'} hover:border-primary transition-colors`}
            data-index={index}
          >
            <img 
              src={image} 
              alt={`Thumbnail ${index + 1}`} 
              class="w-20 h-20 object-cover"
            />
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mainImage = document.getElementById('main-image') as HTMLImageElement;
    const thumbnails = document.querySelectorAll('.thumbnail');
    
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        // Get selected image source
        const img = thumbnail.querySelector('img') as HTMLImageElement;
        const imgSrc = img.src;
        
        // Update main image
        if (mainImage) {
          mainImage.src = imgSrc;
        }
        
        // Update active thumbnail styles
        thumbnails.forEach(thumb => {
          thumb.classList.remove('border-primary');
          thumb.classList.add('border-transparent');
        });
        
        thumbnail.classList.remove('border-transparent');
        thumbnail.classList.add('border-primary');
      });
    });
  });
</script>