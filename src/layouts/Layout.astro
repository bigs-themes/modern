---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import AnnouncementBar from '../components/AnnouncementBar.astro';
import CartPopup from '../components/cart/CartPopup.astro';
import VariantsPopup from '../components/cart/VariantsPopup.astro';
import LivePreviewManager from '../components/LivePreviewManager.astro';
import { shopStyleService } from '../services/ShopStyleService';
import '../assets/css/card-styles.css';
import '../assets/css/button-styles.css';

export interface Props {
  title: string;
  description?: string;
  currentPage?: string;
}

const { title, description = "BigS - N·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu Vi·ªát Nam", currentPage = 'home' } = Astro.props;

// Check if we're in live preview mode
const url = new URL(Astro.request.url);
const isLivePreview = url.searchParams.has('preview') || url.searchParams.has('edit');

// Load shop style config from service
let shopStyleConfig: any = null;
// Extract shop ID from subdomain (e.g., shop1.localhost:4321 -> shop1)
const host = Astro.request.headers.get('host') || '';
const shopId = host.split('.')[0];

try {
  if (!shopId || shopId === 'localhost' || shopId === '127') {
    console.warn('No valid shop ID found in subdomain, skipping shop style config');
  } else {
    // Use ShopStyleService to load config
    shopStyleConfig = await shopStyleService.getShopStyleConfig(shopId);
  }
} catch (error) {
  console.warn('Failed to load shop style config:', error);
  // Fallback to default config
  shopStyleConfig = {
    settings: {
      fonts: {
        heading: 'Inter',
        body: 'Inter'
      }
    },
    pageInterface: {
      announcementBarSettings: {
        visible: true,
        content: 'üéâ Modern Theme v2.0 - Sidebar Navigation Layout!',
        textColor: '#ffffff',
        backgroundColor: '#667eea',
        showOnHomepageOnly: false
      }
    }
  };
}
---

<!doctype html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- SweetAlert2 for notifications -->
    <link rel="stylesheet" href="https://unpkg.com/sweetalert2@11/dist/sweetalert2.min.css">
    
    <!-- Notification system -->
    <script src="/src/utils/notify.js"></script>
    
    <title>{title}</title>
    
    <!-- Google Fonts -->
    {shopStyleConfig?.settings?.fonts && (
      <>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link 
          href={`https://fonts.googleapis.com/css2?family=${shopStyleConfig.settings.fonts.heading}:wght@400;500;600;700&family=${shopStyleConfig.settings.fonts.body}:wght@400;500;600&display=swap`} 
          rel="stylesheet" 
        />
      </>
    )}

    <style>
      /* Modern Sidebar Layout Styles */
      .modern-layout {
        display: flex;
        min-height: 100vh;
      }
      
      .sidebar {
        width: 280px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
      }
      
      .sidebar-header {
        text-align: center;
        padding: 20px 0;
        border-bottom: 1px solid rgba(255,255,255,0.2);
        margin-bottom: 30px;
      }
      
      .sidebar-logo {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 10px;
      }
      
      .sidebar-nav {
        list-style: none;
        padding: 0;
        margin: 0;
      }
      
      .sidebar-nav li {
        margin-bottom: 10px;
      }
      
      .sidebar-nav a {
        display: block;
        padding: 12px 16px;
        color: white;
        text-decoration: none;
        border-radius: 8px;
        transition: all 0.3s ease;
      }
      
      .sidebar-nav a:hover {
        background: rgba(255,255,255,0.1);
        transform: translateX(5px);
      }
      
      .sidebar-nav a.active {
        background: rgba(255,255,255,0.2);
        font-weight: 600;
      }
      
      .main-content {
        flex: 1;
        margin-left: 280px;
        background: #f8fafc;
      }
      
      .top-bar {
        background: white;
        padding: 15px 30px;
        border-bottom: 1px solid #e2e8f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .content-area {
        padding: 30px;
        min-height: calc(100vh - 80px);
      }
      
      .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
      }
      
      @media (max-width: 768px) {
        .sidebar {
          transform: translateX(-100%);
          transition: transform 0.3s ease;
        }
        
        .sidebar.open {
          transform: translateX(0);
        }
        
        .main-content {
          margin-left: 0;
        }
        
        .mobile-menu-toggle {
          display: block;
        }
      }
    </style>
  </head>
  <body>
    <div id="app" class="modern-layout">
      <!-- Sidebar Navigation -->
      <aside class="sidebar" id="sidebar">
        <button class="mobile-menu-toggle" id="mobile-menu-toggle">‚ò∞</button>
        
        <div class="sidebar-header">
          <div class="sidebar-logo">BigS Store</div>
          <div style="font-size: 14px; opacity: 0.8;">Modern Theme v2.0</div>
        </div>
        
        <nav>
          <ul class="sidebar-nav">
            <li><a href="/" class={currentPage === 'home' ? 'active' : ''}>üè† Trang ch·ªß</a></li>
            <li><a href="/san-pham" class={currentPage === 'products' ? 'active' : ''}>üì¶ S·∫£n ph·∫©m</a></li>
            <li><a href="/danh-muc" class={currentPage === 'categories' ? 'active' : ''}>üìÇ Danh m·ª•c</a></li>
            <li><a href="/gio-hang" class={currentPage === 'cart' ? 'active' : ''}>üõí Gi·ªè h√†ng</a></li>
            <li><a href="/lien-he" class={currentPage === 'contact' ? 'active' : ''}>üìû Li√™n h·ªá</a></li>
            <li><a href="/ve-chung-toi" class={currentPage === 'about' ? 'active' : ''}>‚ÑπÔ∏è V·ªÅ ch√∫ng t√¥i</a></li>
          </ul>
        </nav>
        
        <div style="margin-top: 50px; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 12px;">
          <h4 style="margin: 0 0 15px 0; font-size: 16px;">üé® Theme Info</h4>
          <p style="margin: 0; font-size: 12px; opacity: 0.8;">
            Modern Theme v·ªõi sidebar navigation<br/>
            Responsive design<br/>
            Live preview support
          </p>
        </div>
      </aside>

      <!-- Main Content Area -->
      <div class="main-content">
        <!-- Top Bar -->
        <div class="top-bar">
          <div>
            <h1 style="margin: 0; font-size: 24px; color: #1a202c;">{title}</h1>
          </div>
          <div style="display: flex; gap: 15px; align-items: center;">
            <button class="btn-secondary" style="padding: 8px 16px;">üîç T√¨m ki·∫øm</button>
            <button class="btn-primary" style="padding: 8px 16px;">üõí Gi·ªè h√†ng (0)</button>
          </div>
        </div>

        <!-- Content Area -->
        <div class="content-area">
          <AnnouncementBar 
            visible={shopStyleConfig?.pageInterface?.announcementBarSettings?.visible ?? true}
            content={shopStyleConfig?.pageInterface?.announcementBarSettings?.content ?? ''}
            textColor={shopStyleConfig?.pageInterface?.announcementBarSettings?.textColor ?? '#ffffff'}
            backgroundColor={shopStyleConfig?.pageInterface?.announcementBarSettings?.backgroundColor ?? '#000000'}
            showOnHomepageOnly={shopStyleConfig?.pageInterface?.announcementBarSettings?.showOnHomepageOnly ?? false}
            currentPage={currentPage}
          />
          
          <main>
            <slot />
          </main>
        </div>
      </div>

      <CartPopup />
      <VariantsPopup />
    </div>
    
    <LivePreviewManager />
    
    <script define:vars={{ shopStyleConfig }}>
      // Initialize window.app
      if (typeof window !== 'undefined') {
        window.app = window.app || {};
        
        // Mobile menu toggle
        const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
        const sidebar = document.getElementById('sidebar');
        
        if (mobileMenuToggle && sidebar) {
          mobileMenuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('open');
          });
        }
        
        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', (e) => {
          if (window.innerWidth <= 768) {
            if (!sidebar?.contains(e.target) && !mobileMenuToggle?.contains(e.target)) {
              sidebar?.classList.remove('open');
            }
          }
        });

        // Apply initial style config from server
        if (shopStyleConfig) {
          const { colors, fonts, styles, layout } = shopStyleConfig;
          
          // Function to apply dynamic hover effects
          function applyDynamicHoverEffects() {
            // Apply button hover effects
            const primaryHoverEffect = getComputedStyle(document.documentElement).getPropertyValue('--button-primary-hover-effect').trim();
            const secondaryHoverEffect = getComputedStyle(document.documentElement).getPropertyValue('--button-secondary-hover-effect').trim();
            const cardHoverEffect = getComputedStyle(document.documentElement).getPropertyValue('--card-hover-effect').trim();
            
            // Add event listeners for dynamic hover effects
            document.addEventListener('DOMContentLoaded', () => {
              // Primary button hover effects
              document.querySelectorAll('.btn-primary').forEach(btn => {
                btn.addEventListener('mouseenter', () => {
                  if (primaryHoverEffect === 'scale') {
                    btn.style.transform = 'scale(1.05)';
                  } else if (primaryHoverEffect === 'invert') {
                    btn.style.filter = 'invert(1)';
                  } else if (primaryHoverEffect === 'darken') {
                    btn.style.filter = 'brightness(0.8)';
                  }
                });
                
                btn.addEventListener('mouseleave', () => {
                  btn.style.transform = '';
                  btn.style.filter = '';
                });
              });
              
              // Secondary button hover effects
              document.querySelectorAll('.btn-secondary').forEach(btn => {
                btn.addEventListener('mouseenter', () => {
                  if (secondaryHoverEffect === 'scale') {
                    btn.style.transform = 'scale(1.05)';
                  } else if (secondaryHoverEffect === 'invert') {
                    btn.style.filter = 'invert(1)';
                  } else if (secondaryHoverEffect === 'darken') {
                    btn.style.filter = 'brightness(0.8)';
                  }
                });
                
                btn.addEventListener('mouseleave', () => {
                  btn.style.transform = '';
                  btn.style.filter = '';
                });
              });
              
              // Card hover effects
              document.querySelectorAll('.card').forEach(card => {
                card.addEventListener('mouseenter', () => {
                  if (cardHoverEffect === 'scale') {
                    card.style.transform = 'scale(1.02)';
                  } else if (cardHoverEffect === 'shadow') {
                    card.style.boxShadow = '0 10px 25px rgba(0,0,0,0.15)';
                  } else if (cardHoverEffect === 'glow') {
                    card.style.boxShadow = '0 0 20px rgba(102, 126, 234, 0.3)';
                  }
                });
                
                card.addEventListener('mouseleave', () => {
                  card.style.transform = '';
                  card.style.boxShadow = '';
                });
              });
            });
          }
          
          // Apply hover effects
          applyDynamicHoverEffects();
        }
      }
    </script>
  </body>
</html>
